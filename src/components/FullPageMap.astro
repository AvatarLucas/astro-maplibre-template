---
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import maplibregl from "maplibre-gl";
import type {
  FillLayerSpecification,
  CircleLayerSpecification,
  LineLayerSpecification,
  SymbolLayerSpecification,
} from "maplibre-gl";
import fs from "fs";
import yaml from "js-yaml";

// Load and parse the YAML file
const fileContents = fs.readFileSync(
  "src/pages/_full_page_map_components.yaml",
  "utf8"
);

export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  mapstyle: string;
  container: string;

  /** If `false`, the map will not respond to interaction.  This is a static map built with the full web map rendering API. */
  interactive?: boolean;
  containerstyle?: string;
  pitch?: number;
  bearing?: number;
  layers?: GeoJSONFeatureLayer[];
}

export interface MapEvent {
  type: "click" | "mousemove" | "mouseenter" | "mouseleave";
  content: Array<{
    [key: string]: string | ((e: maplibregl.MapLayerMouseEvent) => string);
  }>;
}

export interface GeoJSONFeatureLayer {
  "data-type": "geojson";
  id: string;
  label?: string;
  url: string;
  toggle?: boolean;
  visible?: boolean;
  "layer-type":
    | "symbol"
    | "fill"
    | "custom"
    | "raster"
    | "line"
    | "circle"
    | "heatmap"
    | "fill-extrusion"
    | "hillshade"
    | "background";
  paint?:
    | FillLayerSpecification
    | LineLayerSpecification
    | CircleLayerSpecification
    | SymbolLayerSpecification;
  mouseEvent: MapEvent[];
}

const layers: GeoJSONFeatureLayer[] = yaml.load(
  fileContents
) as GeoJSONFeatureLayer[];

console.log("Layers array:", layers);

const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  container,
  interactive,
  containerstyle = "height: 61.8vh",
  pitch,
  bearing,
} = Astro.props;
---

<div class="full-page-map-container">
  <!-- Map Container -->
  <div
    id={container}
    class="maplibre-inline map-container"
    style={{ width: "100vw", height: "100vh" }}
  >
    <nav id="menu"></nav>
    <maplibre-fullpage-map
      data-latitude={latitude}
      data-longitude={longitude}
      data-zoom={zoom}
      data-mapstyle={mapstyle}
      data-container={container}
      data-interactive={interactive}
      data-containerstyle={containerstyle}
      data-pitch={pitch}
      data-bearing={bearing}
      data-layers={JSON.stringify(layers)}
    >
      <link
        rel="stylesheet"
        href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
      />
      <script>
        console.log("Script started")
        import maplibregl, { type FillLayerSpecification, type LineLayerSpecification } from "maplibre-gl";
        import type { GeoJSONFeatureLayer } from "./FullPageMap.astro";

        class MapLibreFullPageMap extends HTMLElement {
          constructor() {
            super();

            const map = new maplibregl.Map({
              container: this.dataset.container || "maplibre-map",
              interactive: this.dataset.interactive
                ? JSON.parse(this.dataset.interactive)
                : false,
              center: [
                this.dataset.longitude ? parseFloat(this.dataset.longitude) : 0,
                this.dataset.latitude ? parseFloat(this.dataset.latitude) : 0,
              ],
              zoom: this.dataset.zoom
                ? parseFloat(this.dataset.zoom)
                : undefined,
              style: this.dataset.mapstyle,
            });

            map.on("load", () => {
              // Add layers
              const layers = this.dataset.layers
                ? JSON.parse(this.dataset.layers)
                : undefined;
              if (layers) {
                // Add toggle buttons if set to be so
                layers.forEach((layer: GeoJSONFeatureLayer) => {
                  if (layer.toggle) {
                    const toggleButton = document.createElement("a");
                    const menu = document.getElementById("menu");
                    toggleButton.textContent = layer.label ?? layer.id;
                    if (layer.visible === true) {
                      toggleButton.className = "active";
                    }
                    toggleButton.onclick = () => {
                      if (
                        map.getLayoutProperty(layer.id, "visibility") ===
                        "visible"
                      ) {
                        map.setLayoutProperty(layer.id, "visibility", "none");
                        toggleButton.className = "";
                      } else {
                        map.setLayoutProperty(
                          layer.id,
                          "visibility",
                          "visible"
                        );
                        toggleButton.className = "active";
                      }
                    };
                    if (menu) {
                      menu.appendChild(toggleButton);
                    }
                  }
                });

                layers.forEach((layer: GeoJSONFeatureLayer) => {
                  console.log('Processing layer: ${layer.id}');

                  if (layer["data-type"] === "geojson") {
                    fetch(layer.url)
                      .then((response) => {
                        console.log(`Fetched URL: ${layer.url}`);  // Log the URL being fetched
                        return response.json();
                      })
                      .then((data) => {
                        console.log('Received GeoJSON data for layer ${layer.id}');  // Log the parsed data
                        data.features.forEach(
                          (feature: {
                            geometry: {
                              type: string;
                              coordinates: number[];
                            };
                            properties: {
                              longitude: number;
                              latitude: number;
                            };
                          }) => {
                            // Check if there's already a valid geometry, otherwise reconstruct it
                            if (!feature.geometry) {
                              feature.geometry = {
                                type: "Point",
                                coordinates: [
                                  Number(feature.properties.longitude),
                                  Number(feature.properties.latitude),
                                ],
                              };
                            }
                          }
                        );

                        // Add source if it doesn't exist
                        if (!map.getSource(layer.id)) {
                          console.log(`Adding source for layer: ${layer.id}`);  // Log source addition
                          map.addSource(layer.id, {
                            type: "geojson",
                            data: data,
                          });
                        }

                        // Add layer if it doesn't already exist
                        if (!map.getLayer(layer.id)) {
                          console.log(`Layer paint properties for ${layer.id}:`, layer.paint);  // Log layer addition

                          const layerConfig: any = {
                            id: layer.id,
                            type: layer["layer-type"] as "symbol" | "fill" | "raster" | "line" | "circle" "heatmap" | "fill-extrusion" | "hillshade" | "background",  // Remove unsupported type "custom"
                            source: layer.id as string, // Use source as a string
                            layout: {
                              visibility: layer.visible ? "visible" : "none",
                            },
                            paint: {},
                          };

                          // Conditional paint properties based on layer type
                          if (layer["layer-type"] === "circle" && layer.paint) {
                            layerConfig.paint = {
                              "circle-color": layer.paint["circle-color"] || "#beb297",
                              "circle-radius": layer.paint["circle-radius"] || 1,
                            };
                          } else if (layer.paint) {
                            // For other layer types, add paint properties as needed (optional, example only)
                            layerConfig.paint = layer.paint as FillLayerSpecification | LineLayerSpecification | SymbolLayerSpecification; // Assign specific types
                          }

                          // Add the configured layer to the map
                          map.addLayer(layerConfig);
                        }

                    // Handle mouse events if defined
                    if (layer.mouseEvent) {
                      const popup = new maplibregl.Popup({ offset: 15 });

                      layer.mouseEvent.forEach((event) => {
                        map.on(event.type, layer.id, (e) => {
                          const popupContent = event.content
                            .map((tag) => {
                              const tagName = Object.keys(tag)[0];
                              console.log(tag[tagName]);
                              const value = Array.isArray(tag[tagName])
                                ? tag[tagName]
                                    .map(
                                      (item: {
                                        [key: string]:
                                          | string
                                          | {
                                              property?: string;
                                              else?: string;
                                              str?: string;
                                              href?: string;
                                              text?: string;
                                              src?: string;
                                              alt?: string;
                                            };
                                      }) => {
                                        if ("property" in item) {
                                          return e.features && e.features[0]
                                            ? e.features[0].properties[
                                                item.property as string
                                              ] || item.else
                                            : item.else;
                                        } else if ("str" in item) {
                                          return item.str;
                                        } else if (
                                          tagName === "a" &&
                                          "href" in item &&
                                          "text" in item
                                        ) {
                                          // Handle link tag with href and text
                                          return `<a href="${item.href}" target="_blank">${item.text}</a>`;
                                        } else if (
                                          tagName === "img" &&
                                          "src" in item
                                        ) {
                                          // Handle image tag with src and optional alt
                                          const altText = item.alt || "";
                                          return `<img src="${item.src}" alt="${altText}" />`;
                                        } else {
                                          return ""; // Fallback for any unexpected structure
                                        }
                                      }
                                    )
                                    .join(" ") // Join all parts together to form the full tag content
                                : tag[tagName];

                              return `<${tagName}>${value}</${tagName}>`;
                            })
                            .join(" "); // Join all tags to form the full popup content

                          popup
                            .setLngLat(e.lngLat)
                            .setHTML(popupContent)
                            .addTo(map);

                          // If event is mouseover, add a mouseout event to remove the popup
                          if (event.type === "mousemove") {
                            map.on("mouseleave", layer.id, () => {
                              popup.remove();
                            });
                          }
                        });
                      });
                    }
                  }
                });
              }
            });
          }
        }

        window.customElements.define("maplibre-fullpage-map", MapLibreFullPageMap);
      </script>
    </maplibre-fullpage-map>
  </div>
</div>
