---
import type { LayerGroup } from "@types";
import fs from "fs";
import yaml from "js-yaml";

// Load and parse the YAML file
const fileContents = fs.readFileSync("src/pages/_scrollytelling_steps.yaml", "utf8");

interface MapStep {
  title: string;
  description: string;
  center: [number, number];
  zoom: number;
  pitch?: number;
  bearing?: number;
  media?: string;
  position?: "left" | "right" | "centered" | "full";
  layers?: LayerGroup[];
  persist?: boolean;
  mapAnimation?: "flyTo" | "easeTo" | "jumpTo";
  rotateAnimation?: boolean;
}

const mapData: MapStep[] = yaml.load(fileContents) as MapStep[];

const cemeteryCentroids = JSON.parse(fs.readFileSync("public/cemetery_centroids.geojson", "utf8"));
const cemeteryPolygons = JSON.parse(fs.readFileSync("public/cemetery_polygons.geojson", "utf8"));

interface Cemetery {
  Name: string;
  zoomCenter: [number, number];
  zoomLevel: number;
}

const cemeteryOptions: Cemetery[] = cemeteryCentroids.features.map((centroid: any) => {
  const Name = centroid.properties.Name;
  const zoomCenter = centroid.properties.zoomCenter;
  const matchingPolygon = cemeteryPolygons.features.find(
    (polygon: any) => polygon.properties.Name === Name
  );
  const zoomLevel = matchingPolygon ? matchingPolygon.properties.zoomLevel : 14;

  return {
    Name,
    zoomCenter,
    zoomLevel,
  };
});

export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  mapstyle: string;
  container: string;

  interactive?: boolean;
  containerstyle?: string;
  pitch?: number;
  bearing?: number;
  layers?: LayerGroup[];
  mapAnimation?: "flyTo" | "easeTo" | "jumpTo";
  rotateAnimation?: boolean;
}

const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  container,
  interactive,
  containerstyle = "height: 61.8vh",
  pitch,
  bearing,
  layers,
  mapAnimation,
  rotateAnimation,
} = Astro.props;

const layersJson = layers ? JSON.stringify(layers) : undefined;
---

<div class="scrollytelling-container">
  <div
    id={container}
    class="maplibre-scrollytelling map-container"
    style="width: 100vw; height: 100vh;"
  >
    <maplibre-map
      data-latitude={latitude}
      data-longitude={longitude}
      data-zoom={zoom}
      data-mapstyle={mapstyle}
      data-container={container}
      data-interactive={interactive}
      data-containerstyle={containerstyle}
      data-pitch={pitch}
      data-bearing={bearing}
      data-layers={layersJson}
      data-map-animation={mapAnimation}
      data-map-rotate-animation={rotateAnimation}
    >
      <link
        rel="stylesheet"
        href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
      />
      <script>
        import maplibregl from "maplibre-gl";

        class MapLibreScrollytellingMap extends HTMLElement {
          constructor() {
            super();
            const map = new maplibregl.Map({
              container: this.dataset.container || "maplibre-map",
              interactive: this.dataset.interactive
                ? JSON.parse(this.dataset.interactive)
                : false,
              center: [
                this.dataset.longitude ? parseFloat(this.dataset.longitude) : 0,
                this.dataset.latitude ? parseFloat(this.dataset.latitude) : 0,
              ],
              zoom: this.dataset.zoom
                ? parseFloat(this.dataset.zoom)
                : undefined,
              style: this.dataset.mapstyle,
            });

            window.map = map;

            const infoBox = document.getElementById("info-box");
            let haltScrolly = false;

            map.on("load", () => {
              console.log("Map loaded!");

              // Add layers
              const layers = JSON.parse(this.dataset.layers || "[]");
              layers.forEach((layer: any) => {
                if (!map.getSource(layer.id)) {
                  map.addSource(layer.id, {
                    type: layer["data-type"] || "geojson",
                    data: layer.url,
                  });
                }

                if (!map.getLayer(layer.id)) {
                  map.addLayer({
                    id: layer.id,
                    type: layer["layer-type"],
                    source: layer.id,
                    paint: layer.paint || {},
                    layout: {
                      visibility: layer.visible ? "visible" : "none",
                    },
                  });
                }
              });

              // Cemetery polygons hover and click
              map.on("mousemove", "cemetery_polygons_fill", () => {
                map.getCanvas().style.cursor = "pointer";
              });

              map.on("mouseleave", "cemetery_polygons_fill", () => {
                map.getCanvas().style.cursor = "";
              });

              map.on("click", "cemetery_polygons_fill", (e) => {
                if (infoBox && e.features && e.features.length > 0) {
                  const properties = e.features[0].properties;

                  const name = properties.Name || "Unknown";
                  const religion = properties.Religion || "Not specified";
                  const burials = properties.Burials || "Unknown";
                  const area = properties.area_sqft
                    ? `${properties.area_sqft.toLocaleString()} sqft`
                    : "Unknown";

                  infoBox.innerHTML = `
                    <h3>Cemetery Name: ${name}</h3>
                    <p>Religion: ${religion}</p>
                    <p>No. of Burials: ${burials}</p>
                    <p>Land Area: ${area}</p>
                  `;
                  infoBox.style.display = "block";
                }
              });

              // Scrollytelling observer
              const sections = document.querySelectorAll("section");
              const observer = new IntersectionObserver(
                (entries) => {
                  entries.forEach((entry) => {
                    if (entry.isIntersecting && !haltScrolly) {
                      const centerAttr = entry.target.getAttribute("data-center");
                      const zoomAttr = entry.target.getAttribute("data-zoom");
                      const center = JSON.parse(centerAttr || "[]");
                      const zoom = parseFloat(zoomAttr || "0");

                      map.flyTo({ center, zoom, essential: true });
                    }
                  });
                },
                { threshold: 0.5 }
              );

              sections.forEach((section) => observer.observe(section));

              // Cemetery dropdown fly-to logic
              const button = document.getElementById("zoom-button");
              const dropdown = document.getElementById(
                "cemetery-dropdown"
              ) as HTMLSelectElement;

              if (dropdown && button) {
                button.addEventListener("click", () => {
                  const selectedIndex = dropdown.selectedIndex;
                  const selectedOption = dropdown.options[selectedIndex];
                  const coordinates = JSON.parse(
                    selectedOption.getAttribute("data-coordinates") || "[]"
                  );
                  const zoomLevel = parseFloat(
                    selectedOption.getAttribute("data-zoom") || "0"
                  );

                  haltScrolly = true;
                  map.flyTo({ center: coordinates, zoom: zoomLevel });

                  setTimeout(() => {
                    haltScrolly = false;
                  }, 2000);
                });
              }
            });
          }
        }

        window.customElements.define("maplibre-map", MapLibreScrollytellingMap);
      </script>
    </maplibre-map>
  </div>

  <!-- Cemetery Info Box -->
  <div id="info-box" class="info-box">
    <p>Select a cemetery to view details.</p>
  </div>

  <main>
    {mapData.map((step, index) => (
      <section
        id={`section-${index}`}
        data-center={JSON.stringify(step.center)}
        data-zoom={step.zoom}
        class:list={[step.position ? step.position : "lefty", "step"]}
      >
        <div class="step-content">
          <h2>{step.title}</h2>
          <p>{step.description}</p>
          {step.media ? <img src={step.media} alt={step.title} /> : null}
          {step.title === "Explore Cemeteries" && (
            <>
              <select id="cemetery-dropdown">
                {cemeteryOptions.map((cemetery) => (
                  <option
                    value={cemetery.Name}
                    data-coordinates={JSON.stringify(cemetery.zoomCenter)}
                    data-zoom={cemetery.zoomLevel}
                  >
                    {cemetery.Name}
                  </option>
                ))}
              </select>
              <button id="zoom-button">Go to Cemetery</button>
            </>
          )}
        </div>
      </section>
    ))}
  </main>
</div>
