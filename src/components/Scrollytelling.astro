---
import type { LayerGroup } from "@types";
import fs from "fs";
import yaml from "js-yaml";
import { isScrollytellingEnabled, disableScrollytellingTemporarily } from "@lib/utils";

// Log the functions to ensure they are recognized
console.log(isScrollytellingEnabled); // Should log the function
console.log(disableScrollytellingTemporarily); // Should log the function

// Usage example
console.log(isScrollytellingEnabled()); // Should print true initially
disableScrollytellingTemporarily(1000); // Temporarily disable for 1 second
setTimeout(() => console.log(isScrollytellingEnabled()), 2000); // Should print true again after 2 seconds

// Load and parse the YAML file
const fileContents = fs.readFileSync("src/pages/_scrollytelling_steps.yaml", "utf8");

interface MapStep {
  title: string;
  description: string;
  center: [number, number];
  zoom: number;
  pitch?: number;
  bearing?: number;
  media?: string;
  position?: "left" | "right" | "centered" | "full";
  layers?: LayerGroup[];
  persist?: boolean;
  mapAnimation?: "flyTo" | "easeTo" | "jumpTo";
  rotateAnimation?: boolean;
}

const mapData: MapStep[] = yaml.load(fileContents) as MapStep[];

// Load cemetery data
const cemeteryCentroids = JSON.parse(fs.readFileSync("public/cemetery_centroids.geojson", "utf8"));
const cemeteryPolygons = JSON.parse(fs.readFileSync("public/cemetery_polygons.geojson", "utf8"));

interface Cemetery {
  Name: string;
  zoomCenter: [number, number];
  zoomLevel: number;
  Religion: string;
  Burials: number;
  area_sqft: number;
}

const cemeteryOptions: Cemetery[] = cemeteryCentroids.features.map((centroid: any) => {
  const Name = centroid.properties.Name;
  const zoomCenter = centroid.properties.zoomCenter;
  const matchingPolygon = cemeteryPolygons.features.find(
    (polygon: any) => polygon.properties.Name === Name
  );
  const zoomLevel = matchingPolygon ? matchingPolygon.properties.zoomLevel : 14;

  const Religion = matchingPolygon?.properties?.Religion || "Unknown";
  const Burials = matchingPolygon?.properties?.Burials || 0;
  const area_sqft = matchingPolygon?.properties?.area_sqft || 0;

  return {
    Name,
    zoomCenter,
    zoomLevel,
    Religion,
    Burials,
    area_sqft,
  };
});

export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  mapstyle: string;
  container: string;

  interactive?: boolean;
  containerstyle?: string;
  pitch?: number;
  bearing?: number;
  layers?: LayerGroup[];
  mapAnimation?: "flyTo" | "easeTo" | "jumpTo";
  rotateAnimation?: boolean;
}

const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  container,
  interactive,
  containerstyle = "height: 61.8vh",
  pitch,
  bearing,
  layers,
  mapAnimation,
  rotateAnimation,
} = Astro.props;

const layersJson = layers ? JSON.stringify(layers) : undefined;
---

<div class="scrollytelling-container">
  <!-- Map Container -->
  <div
    id={container}
    class="maplibre-scrollytelling map-container"
    style={{ width: "100vw", height: "100vh" }}
  >
    <maplibre-map
      data-latitude={latitude}
      data-longitude={longitude}
      data-zoom={zoom}
      data-mapstyle={mapstyle}
      data-container={container}
      data-interactive={interactive}
      data-containerstyle={containerstyle}
      data-pitch={pitch}
      data-bearing={bearing}
      data-layers={layersJson}
      data-map-animation={mapAnimation}
      data-map-rotate-animation={rotateAnimation}
    >
      <link
        rel="stylesheet"
        href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
      />
      <script>
        import maplibregl from "maplibre-gl";
        import { loadMapLayers } from "@lib/utils";
        import { isScrollytellingEnabled, disableScrollytellingTemporarily } from "@lib/utils";

        class MapLibreScrollytellingMap extends HTMLElement {
          constructor() {
            super();
            const map = new maplibregl.Map({
              container: this.dataset.container || "maplibre-map",
              interactive: this.dataset.interactive
                ? JSON.parse(this.dataset.interactive)
                : false,
              center: [
                this.dataset.longitude ? parseFloat(this.dataset.longitude) : 0,
                this.dataset.latitude ? parseFloat(this.dataset.latitude) : 0,
              ],
              zoom: this.dataset.zoom
                ? parseFloat(this.dataset.zoom)
                : undefined,
              style: this.dataset.mapstyle,
            });

            window.map = map;

            //Rotation function
            let isRotating = false; // Add this variable at the top level of your script

            function rotateCamera(timestamp: number) {
              if (!isRotating) {
                isRotating = true; // Prevent additional rotation loops
                console.log("rotateCamera started");
                requestAnimationFrame(function animate(time) {
                  if (isRotating) { // Continue rotation only if isRotating is true
                    map.rotateTo((time / 100) % 360, { duration: 0 });
                    requestAnimationFrame(animate); // Keep looping
                  } else {
                    console.log("rotateCamera stopped");
                  }
                });
              }
            }

            let haltScrolly = false;

            map.on("load", () => {
              const rotateAnimation = this.dataset.mapRotateAnimation === 'true';
              if (rotateAnimation && !haltScrolly) {
                rotateCamera(Date.now()); // Pass timestamp for rotation
              }

              const popup = new maplibregl.Popup({
                closeButton: true,
                closeOnClick: true,
                className: "cemetery-popup", // Custom class name
              });

              // Dropdown and Button Logic
              const button = document.getElementById("zoom-button");
              const dropdown = document.getElementById("cemetery-dropdown") as HTMLSelectElement | null;

              if (dropdown && button) {
                button.addEventListener("click", () => {
                  if (dropdown.selectedIndex !== -1) {
                    const selectedIndex = dropdown.selectedIndex; // No TypeScript error now
                    const selectedOption = dropdown.options[selectedIndex]; // No TypeScript error now

                    const cemetery = JSON.parse(
                      selectedOption.getAttribute("data-cemetery") || "{}"
                    );

                    haltScrolly = true; // Halt scrollytelling temporarily

                    map.flyTo({
                      center: cemetery.zoomCenter,
                      zoom: cemetery.zoomLevel,
                      essential: true,
                    });

                    popup
                      .setLngLat(cemetery.zoomCenter)
                      .setHTML(
                        `<h3>${cemetery.Name}</h3>
                        <p>Religion: ${cemetery.Religion}</p>
                        <p>No. of Burials: ${cemetery.Burials}</p>
                        <p>Land Area: ${cemetery.area_sqft.toLocaleString()} sqft</p>`
                      )
                      .addTo(map);

                    setTimeout(() => {
                      haltScrolly = false; // Re-enable scrollytelling after delay
                    }, 2000);
                  } else {
                    console.error("No option selected in the dropdown!");
                  }
                });
              } else {
                console.error("Dropdown or button is missing!");
              }

              // Scrollytelling logic
              const sections = document.querySelectorAll("section");
              const observer = new IntersectionObserver(
                (entries) => {
                  if (!isScrollytellingEnabled()) return;
                  // Prevent scrollytelling if disabled
                  
                  entries.forEach((entry) => {
                    if (entry.isIntersecting && !haltScrolly) {
                      const centerAttr = entry.target.getAttribute("data-center");
                      const zoomAttr = entry.target.getAttribute("data-zoom");
                      const pitchAttr = entry.target.getAttribute("data-pitch");
                      const bearingAttr = entry.target.getAttribute("data-bearing");
                      const rotateAnimationAttr = entry.target.getAttribute("data-map-rotate-animation");

                      const center = centerAttr ? JSON.parse(centerAttr) : undefined;
                      const zoom = zoomAttr ? parseFloat(zoomAttr) : undefined;
                      const pitch = pitchAttr ? parseFloat(pitchAttr) : undefined;
                      const bearing = bearingAttr ? parseFloat(bearingAttr) : undefined;
                      const rotateAnimation = rotateAnimationAttr === 'true';

                      // Log the current section and rotateAnimation state
                      console.log(`Observer triggered for section: ${entry.target.id}`);
                      console.log(`Rotate animation for section: ${entry.target.id} -> ${rotateAnimation}`);


                      map.flyTo({
                        center,
                        zoom,
                        pitch,
                        bearing,
                        essential: true,
                        animate: true,
                      });

                      if (rotateAnimation && !haltScrolly) {
                        map.once('moveend', () => {
                          console.log(`Starting rotation for section: ${entry.target.id}`);
                          rotateCamera(Date.now());
                        });
                      }

                       // Clear the popup when moving to the next section
                      popup.remove();

                      // Handle layers defined in the section
                      const layersAttr = entry.target.getAttribute("data-layers");
                      const layers = layersAttr ? JSON.parse(layersAttr) : undefined;
                      if (layers) {
                        loadMapLayers(map, layers, true);
                      }

                      if (haltScrolly) {
                        setTimeout(() => {
                          haltScrolly = false;
                        }, 2000);
                      }
                    }
                  });
                },
                { threshold: 0.5 }
              );

              sections.forEach((section) => observer.observe(section));
            });
          }
        }

        window.customElements.define(
          "maplibre-map",
          MapLibreScrollytellingMap
        );
      </script>
    </maplibre-map>
  </div>

  <!-- Scrollytelling Content -->
  <main>
    {mapData.map((step, index) => (
      <section
        id={`section-${index}`}
        data-center={JSON.stringify(step.center)}
        data-zoom={step.zoom}
        data-pitch={step.pitch}
        data-bearing={step.bearing}
        data-layers={JSON.stringify(step.layers)}
        data-map-animation={step.mapAnimation}
        data-map-rotate-animation={
          step.rotateAnimation === true ? "true" : "false"
        }
        class:list={[step.position ? step.position : "lefty", "step"]}
      >
        <div class="step-content">
          <h2>{step.title}</h2>
          <p>{step.description}</p>
          {step.title === "Explore Cemeteries" && (
            <div>
              <select id="cemetery-dropdown" style="margin-top: 10px;">
                {cemeteryOptions.map((cemetery) => (
                  <option
                    value={cemetery.Name}
                    data-cemetery={JSON.stringify(cemetery)}
                  >
                    {cemetery.Name}
                  </option>
                ))}
              </select>
              <button id="zoom-button" style="margin-top: 10px;">
                Go to Cemetery
              </button>
            </div>
          )}
        </div>
      </section>
    ))}
  </main>
</div>
